# This workflow will build and push a new container image to Alibaba Cloud Container Registry (ACR),
# and then will deploy it to Alibaba Cloud Container Service for Kubernetes (ACK), when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ACR repository to store your container images.
#    You can use ACR EE instance for more security and better performance.
#    For instructions see https://www.alibabacloud.com/help/doc-detail/142168.htm
#
# 2. Create an ACK cluster to run your containerized application.
#    You can use ACK Pro cluster for more security and better performance.
#    For instructions see https://www.alibabacloud.com/help/doc-detail/95108.htm
#
# 3. Store your AccessKey pair in GitHub Actions secrets named `ACCESS_KEY_ID` and `ACCESS_KEY_SECRET`.
#    For instructions on setting up secrets see: https://developer.github.com/actions/managing-workflows/storing-secrets/
#
# 4. Change the values for the REGION_ID, REGISTRY, NAMESPACE, IMAGE, ACK_CLUSTER_ID, and ACK_DEPLOYMENT_NAME.
#

name: Build and Deploy to ACK

on:
  push:
    branches: [ "main" ]

# Environment variables available to all jobs and steps in this workflow.
env:
  REGION_ID: cn-hangzhou
  REGISTRY: crpi-ibyuhsh8e7drc0ir.cn-hangzhou.personal.cr.aliyuncs.com
  NAMESPACE: sintan1071-test-acr-namespace
  IMAGE: sintan1071-test-acr-repo
  TAG: ${{ github.sha }}
  ACK_CLUSTER_ID: ${{ vars.ACK_CLUSTER_ID }}
  ACK_DEPLOYMENT_NAME: sintan1071-test-alic-db-service

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # --- 修改：使用 docker login 和用户名/密码 ---
    - name: Login to ACR with Username and Password
      env:
        # 从 Secrets 获取用户名和密码
        ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
        ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
      run: |
        # 使用 --password-stdin 更安全，避免密码出现在进程列表或日志中
        echo "$ACR_PASSWORD" | docker login --username "$ACR_USERNAME" --password-stdin ${{ env.REGISTRY }}

    # 1.2 Build and push image to ACR
    - name: Build and push image to ACR
      run: |
        docker build --tag "$REGISTRY/$NAMESPACE/$IMAGE:$TAG" .
        docker push "$REGISTRY/$NAMESPACE/$IMAGE:$TAG"

    # 3.1 Set ACK context
    - name: Set K8s context
      uses: aliyun/ack-set-context@v1
      with:
        access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
        access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
        cluster-id: "${{ env.ACK_CLUSTER_ID }}"
    
    # --- 创建/更新 ConfigMap ---
    - name: Apply ConfigMap
      env:
        # 从 GitHub Secrets 或 Variables 获取配置值
        # 推荐对非敏感信息使用 Variables (vars)，对敏感信息使用 Secrets (secrets)
        DB_DRIVER: ${{ vars.DB_DRIVER }} # 使用 vars，提供默认值
        DB_USER: ${{ vars.DB_USER }}
        DB_HOST: ${{ vars.DB_HOST }}
        DB_PORT: ${{ vars.DB_PORT }} # 使用 vars，提供默认值
        DB_NAME: ${{ vars.DB_NAME }}
      run: |
        echo "apiVersion: v1
        kind: ConfigMap
        metadata:
          name: db-config # ConfigMap 名称
        data:
          DB_DRIVER: \"$DB_DRIVER\"
          DB_USER: \"$DB_USER\"
          DB_HOST: \"$DB_HOST\"
          DB_PORT: \"$DB_PORT\"
          DB_NAME: \"$DB_NAME\"
        " | kubectl apply -f -

    # --- 创建/更新 Secret ---
    - name: Apply Secret
      env:
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }} # 必须从 Secrets 获取密码
      run: |
        # 使用 --dry-run 生成 YAML，然后应用，避免直接在命令行暴露密码
        kubectl create secret generic db-secret \
          --from-literal=DB_PASSWORD="$DB_PASSWORD" \
          --dry-run=client -o yaml | kubectl apply -f -

    # 3.2 Deploy the image to the ACK cluster
    - name: Set up Kustomize
      run: |-
        # 安装最新稳定版的 Kustomize
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
    - name: Deploy Application to ACK
      env:
          # 需要从 build job 获取 tag, 或者直接使用 env.TAG
          IMAGE_TAG: ${{ needs.build.outputs.image_tag || env.TAG }} # 假设 build job 有输出，或者使用 env.TAG
      run: |
        # --- 修改这里：将 REGISTRY/NAMESPACE/IMAGE:TAG 改为 YOUR_IMAGE_PLACEHOLDER ---
        ./kustomize edit set image YOUR_IMAGE_PLACEHOLDER="$REGISTRY/$NAMESPACE/$IMAGE:$IMAGE_TAG"
        # --- 后续命令不变 ---
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$ACK_DEPLOYMENT_NAME
        kubectl get services -o wide
